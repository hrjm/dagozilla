
Project 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e60  08005e60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e68  08005e68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a4c  20000010  08005e80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a5c  08005e80  00024a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b11f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fa  00000000  00000000  0003b15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f71  00000000  00000000  00040ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016106  00000000  00000000  00043a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da33b  00000000  00000000  00059b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  00133ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dc0 	.word	0x08005dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005dc0 	.word	0x08005dc0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb8c 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f834 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f940 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f914 	bl	8000744 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800051c:	f000 f89c 	bl	8000658 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0x54>)
 8000524:	f001 fd46 	bl	8001fb4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 41999999);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x54>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <main+0x58>)
 800052e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 febc 	bl	80032ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0x60>)
 800053a:	f002 ff01 	bl	8003340 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <main+0x64>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <main+0x68>)
 8000546:	2100      	movs	r1, #0
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x6c>)
 800054a:	f002 fef9 	bl	8003340 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0x70>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f002 fece 	bl	80032f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x50>
 800055a:	bf00      	nop
 800055c:	2000493c 	.word	0x2000493c
 8000560:	0280de7f 	.word	0x0280de7f
 8000564:	08005e00 	.word	0x08005e00
 8000568:	08000885 	.word	0x08000885
 800056c:	200049c8 	.word	0x200049c8
 8000570:	08005e24 	.word	0x08005e24
 8000574:	080008a5 	.word	0x080008a5
 8000578:	200049cc 	.word	0x200049cc

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fc10 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <SystemClock_Config+0xd4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <SystemClock_Config+0xd4>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <SystemClock_Config+0xd8>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <SystemClock_Config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f91a 	bl	8001844 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000616:	f000 f967 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe06 	bl	8001248 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000642:	f000 f951 	bl	80008e8 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_TIM2_Init+0xe4>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_TIM2_Init+0xe4>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_TIM2_Init+0xe4>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83999999;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_TIM2_Init+0xe4>)
 800069e:	4a28      	ldr	r2, [pc, #160]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_TIM2_Init+0xe4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_TIM2_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <MX_TIM2_Init+0xe4>)
 80006b0:	f001 fb66 	bl	8001d80 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80006ba:	f000 f915 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <MX_TIM2_Init+0xe4>)
 80006cc:	f001 ff04 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80006d6:	f000 f907 	bl	80008e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <MX_TIM2_Init+0xe4>)
 80006dc:	f001 fc10 	bl	8001f00 <HAL_TIM_PWM_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80006e6:	f000 f8ff 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	4619      	mov	r1, r3
 80006f8:	4810      	ldr	r0, [pc, #64]	; (800073c <MX_TIM2_Init+0xe4>)
 80006fa:	f002 faed 	bl	8002cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000704:	f000 f8f0 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_TIM2_Init+0xe4>)
 8000720:	f001 fe18 	bl	8002354 <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800072a:	f000 f8dd 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <MX_TIM2_Init+0xe4>)
 8000730:	f000 f932 	bl	8000998 <HAL_TIM_MspPostInit>

}
 8000734:	bf00      	nop
 8000736:	3738      	adds	r7, #56	; 0x38
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000493c 	.word	0x2000493c
 8000740:	0501bcff 	.word	0x0501bcff

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f002 fb3c 	bl	8002df8 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f8af 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20004984 	.word	0x20004984
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a30      	ldr	r2, [pc, #192]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a29      	ldr	r2, [pc, #164]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_GPIO_Init+0xe0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <MX_GPIO_Init+0xe0>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <MX_GPIO_Init+0xe4>)
 8000824:	f000 fcb8 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_GPIO_Init+0xe8>)
 8000840:	f000 fb16 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_GPIO_Init+0xe4>)
 800085c:	f000 fb08 	bl	8000e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f000 fad9 	bl	8000e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086a:	2028      	movs	r0, #40	; 0x28
 800086c:	f000 faf2 	bl	8000e54 <HAL_NVIC_EnableIRQ>

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800088c:	2120      	movs	r1, #32
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <StartBlink01+0x1c>)
 8000890:	f000 fc9b 	bl	80011ca <HAL_GPIO_TogglePin>
      osDelay(1500);
 8000894:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000898:	f002 fde4 	bl	8003464 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800089c:	e7f6      	b.n	800088c <StartBlink01+0x8>
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000

080008a4 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008ac:	2120      	movs	r1, #32
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <StartBlink02+0x1c>)
 80008b0:	f000 fc8b 	bl	80011ca <HAL_GPIO_TogglePin>
      osDelay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f002 fdd4 	bl	8003464 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008bc:	e7f6      	b.n	80008ac <StartBlink02+0x8>
 80008be:	bf00      	nop
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f9c9 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fa6f 	bl	8000e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095c:	d115      	bne.n	800098a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	201c      	movs	r0, #28
 8000980:	f000 fa4c 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000984:	201c      	movs	r0, #28
 8000986:	f000 fa65 	bl	8000e54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b8:	d11d      	bne.n	80009f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_TIM_MspPostInit+0x68>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_TIM_MspPostInit+0x68>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_TIM_MspPostInit+0x68>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d6:	2301      	movs	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <HAL_TIM_MspPostInit+0x6c>)
 80009f2:	f000 fa3d 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_UART_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12b      	bne.n	8000a82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a62:	230c      	movs	r3, #12
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a72:	2307      	movs	r3, #7
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_MspInit+0x8c>)
 8000a7e:	f000 f9f7 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2036      	movs	r0, #54	; 0x36
 8000aae:	f000 f9b5 	bl	8000e1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab2:	2036      	movs	r0, #54	; 0x36
 8000ab4:	f000 f9ce 	bl	8000e54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_InitTick+0xa4>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fccc 	bl	800147c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae4:	f000 fca2 	bl	800142c <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa8>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xac>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xb0>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xac>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xac>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xac>)
 8000b1e:	f001 f92f 	bl	8001d80 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xac>)
 8000b2a:	f001 f979 	bl	8001e20 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	200049d0 	.word	0x200049d0
 8000b48:	40001000 	.word	0x40001000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM2_IRQHandler+0x10>)
 8000b7e:	f001 fae1 	bl	8002144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000493c 	.word	0x2000493c

08000b8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b94:	f000 fb34 	bl	8001200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f001 facf 	bl	8002144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200049d0 	.word	0x200049d0

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f005 f8a3 	bl	8005d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fc7f 	bl	8000508 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c18:	08005e70 	.word	0x08005e70
  ldr r2, =_sbss
 8000c1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c20:	20004a5c 	.word	0x20004a5c

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8d8 	bl	8000e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff ff1e 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe4a 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20004a18 	.word	0x20004a18

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20004a18 	.word	0x20004a18

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff4c 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff61 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ffb1 	bl	8000da0 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff80 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff54 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e165      	b.n	8001158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8154 	bne.w	8001152 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80ae 	beq.w	8001152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_GPIO_Init+0x300>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a5c      	ldr	r2, [pc, #368]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b5a      	ldr	r3, [pc, #360]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a58      	ldr	r2, [pc, #352]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x308>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x21a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x30c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x216>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x310>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x212>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x314>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x20e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x318>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x20a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x31c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x206>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x320>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x202>
 800106e:	2306      	movs	r3, #6
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001072:	2307      	movs	r3, #7
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x304>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x324>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x324>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae96 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	400b      	ands	r3, r1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f806 	bl	8001230 <HAL_GPIO_EXTI_Callback>
  }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0cc      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d90c      	bls.n	8001284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b8      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	494d      	ldr	r1, [pc, #308]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d044      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	2b03      	cmp	r3, #3
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e067      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4934      	ldr	r1, [pc, #208]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fcac 	bl	8000c94 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fca8 	bl	8000c94 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e04f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d20c      	bcs.n	8001390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e032      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4916      	ldr	r1, [pc, #88]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ce:	f000 f887 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	490a      	ldr	r1, [pc, #40]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	5ccb      	ldrb	r3, [r1, r3]
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fb52 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00
 8001404:	40023800 	.word	0x40023800
 8001408:	08005e48 	.word	0x08005e48
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_RCC_GetHCLKFreq+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001430:	f7ff fff0 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0a9b      	lsrs	r3, r3, #10
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	08005e58 	.word	0x08005e58

08001454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001458:	f7ff ffdc 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0b5b      	lsrs	r3, r3, #13
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	08005e58 	.word	0x08005e58

0800147c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	220f      	movs	r2, #15
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetClockConfig+0x60>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 020f 	and.w	r2, r3, #15
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e4:	b088      	sub	sp, #32
 80014e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fc:	4bce      	ldr	r3, [pc, #824]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b0c      	cmp	r3, #12
 8001506:	f200 818d 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x344>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <HAL_RCC_GetSysClockFreq+0x30>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001545 	.word	0x08001545
 8001514:	08001825 	.word	0x08001825
 8001518:	08001825 	.word	0x08001825
 800151c:	08001825 	.word	0x08001825
 8001520:	0800154b 	.word	0x0800154b
 8001524:	08001825 	.word	0x08001825
 8001528:	08001825 	.word	0x08001825
 800152c:	08001825 	.word	0x08001825
 8001530:	08001551 	.word	0x08001551
 8001534:	08001825 	.word	0x08001825
 8001538:	08001825 	.word	0x08001825
 800153c:	08001825 	.word	0x08001825
 8001540:	080016c5 	.word	0x080016c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001544:	4bbd      	ldr	r3, [pc, #756]	; (800183c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001546:	61bb      	str	r3, [r7, #24]
       break;
 8001548:	e16f      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800154a:	4bbd      	ldr	r3, [pc, #756]	; (8001840 <HAL_RCC_GetSysClockFreq+0x360>)
 800154c:	61bb      	str	r3, [r7, #24]
      break;
 800154e:	e16c      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001550:	4bb9      	ldr	r3, [pc, #740]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001558:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155a:	4bb7      	ldr	r3, [pc, #732]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d053      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001566:	4bb4      	ldr	r3, [pc, #720]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	099b      	lsrs	r3, r3, #6
 800156c:	461a      	mov	r2, r3
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	ea02 0400 	and.w	r4, r2, r0
 800157e:	603c      	str	r4, [r7, #0]
 8001580:	400b      	ands	r3, r1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	014b      	lsls	r3, r1, #5
 8001596:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800159a:	0142      	lsls	r2, r0, #5
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	1ac0      	subs	r0, r0, r3
 80015a4:	462b      	mov	r3, r5
 80015a6:	eb61 0103 	sbc.w	r1, r1, r3
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	018b      	lsls	r3, r1, #6
 80015b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015b8:	0182      	lsls	r2, r0, #6
 80015ba:	1a12      	subs	r2, r2, r0
 80015bc:	eb63 0301 	sbc.w	r3, r3, r1
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	00d9      	lsls	r1, r3, #3
 80015ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015ce:	00d0      	lsls	r0, r2, #3
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4621      	mov	r1, r4
 80015d6:	1852      	adds	r2, r2, r1
 80015d8:	4629      	mov	r1, r5
 80015da:	eb43 0101 	adc.w	r1, r3, r1
 80015de:	460b      	mov	r3, r1
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0259      	lsls	r1, r3, #9
 80015ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015ee:	0250      	lsls	r0, r2, #9
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	f7fe fe06 	bl	8000210 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	e04c      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160e:	4b8a      	ldr	r3, [pc, #552]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	099b      	lsrs	r3, r3, #6
 8001614:	461a      	mov	r2, r3
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	ea02 0a00 	and.w	sl, r2, r0
 8001626:	ea03 0b01 	and.w	fp, r3, r1
 800162a:	4650      	mov	r0, sl
 800162c:	4659      	mov	r1, fp
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	014b      	lsls	r3, r1, #5
 8001638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800163c:	0142      	lsls	r2, r0, #5
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	ebb0 000a 	subs.w	r0, r0, sl
 8001646:	eb61 010b 	sbc.w	r1, r1, fp
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001658:	0182      	lsls	r2, r0, #6
 800165a:	1a12      	subs	r2, r2, r0
 800165c:	eb63 0301 	sbc.w	r3, r3, r1
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	00d9      	lsls	r1, r3, #3
 800166a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800166e:	00d0      	lsls	r0, r2, #3
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	eb12 020a 	adds.w	r2, r2, sl
 8001678:	eb43 030b 	adc.w	r3, r3, fp
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0299      	lsls	r1, r3, #10
 8001686:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800168a:	0290      	lsls	r0, r2, #10
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	461a      	mov	r2, r3
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	f7fe fdb8 	bl	8000210 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a8:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	3301      	adds	r3, #1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	61bb      	str	r3, [r7, #24]
      break;
 80016c2:	e0b2      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04d      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	461a      	mov	r2, r3
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	ea02 0800 	and.w	r8, r2, r0
 80016f2:	ea03 0901 	and.w	r9, r3, r1
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	014b      	lsls	r3, r1, #5
 8001704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001708:	0142      	lsls	r2, r0, #5
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	ebb0 0008 	subs.w	r0, r0, r8
 8001712:	eb61 0109 	sbc.w	r1, r1, r9
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	018b      	lsls	r3, r1, #6
 8001720:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001724:	0182      	lsls	r2, r0, #6
 8001726:	1a12      	subs	r2, r2, r0
 8001728:	eb63 0301 	sbc.w	r3, r3, r1
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	00d9      	lsls	r1, r3, #3
 8001736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800173a:	00d0      	lsls	r0, r2, #3
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	eb12 0208 	adds.w	r2, r2, r8
 8001744:	eb43 0309 	adc.w	r3, r3, r9
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	0259      	lsls	r1, r3, #9
 8001752:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001756:	0250      	lsls	r0, r2, #9
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	461a      	mov	r2, r3
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f7fe fd52 	bl	8000210 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	e04a      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	461a      	mov	r2, r3
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	ea02 0400 	and.w	r4, r2, r0
 800178e:	ea03 0501 	and.w	r5, r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	014b      	lsls	r3, r1, #5
 80017a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a4:	0142      	lsls	r2, r0, #5
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	1b00      	subs	r0, r0, r4
 80017ac:	eb61 0105 	sbc.w	r1, r1, r5
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	018b      	lsls	r3, r1, #6
 80017ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017be:	0182      	lsls	r2, r0, #6
 80017c0:	1a12      	subs	r2, r2, r0
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	00d9      	lsls	r1, r3, #3
 80017d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d4:	00d0      	lsls	r0, r2, #3
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	1912      	adds	r2, r2, r4
 80017dc:	eb45 0303 	adc.w	r3, r5, r3
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0299      	lsls	r1, r3, #10
 80017ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ee:	0290      	lsls	r0, r2, #10
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7fe fd06 	bl	8000210 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0f1b      	lsrs	r3, r3, #28
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	61bb      	str	r3, [r7, #24]
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	61bb      	str	r3, [r7, #24]
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	69bb      	ldr	r3, [r7, #24]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200

08001844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e28d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8083 	beq.w	800196a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b04      	cmp	r3, #4
 800186e:	d019      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001870:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001878:	2b08      	cmp	r3, #8
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x124>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d157      	bne.n	8001968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e25a      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x90>
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xb4>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f9bc 	bl	8000c94 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff f9b8 	bl	8000c94 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e21f      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xdc>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f9a8 	bl	8000c94 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f9a4 	bl	8000c94 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e20b      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x104>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d017      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1d3      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f951 	bl	8000c94 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f94d 	bl	8000c94 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1b4      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f930 	bl	8000c94 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff f92c 	bl	8000c94 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e193      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f910 	bl	8000c94 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff f90c 	bl	8000c94 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e173      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x234>
 8001a96:	e01b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f8f9 	bl	8000c94 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f8f5 	bl	8000c94 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d907      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e15c      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4b8a      	ldr	r3, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ea      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8097 	beq.w	8001c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a7e      	ldr	r2, [pc, #504]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f8b5 	bl	8000c94 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff f8b1 	bl	8000c94 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e118      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x31e>
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x340>
 8001b6a:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f876 	bl	8000c94 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f872 	bl	8000c94 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0d7      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <HAL_RCC_OscConfig+0x368>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f860 	bl	8000c94 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f85c 	bl	8000c94 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0c1      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ad 	beq.w	8001d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c16:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d060      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d145      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f830 	bl	8000c94 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f82c 	bl	8000c94 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e093      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	071b      	lsls	r3, r3, #28
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f801 	bl	8000c94 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe fffd 	bl	8000c94 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e064      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x452>
 8001cb4:	e05c      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ffea 	bl	8000c94 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ffe6 	bl	8000c94 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x480>
 8001ce2:	e045      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x538>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d030      	beq.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d129      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d122      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d119      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fdd0 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 fc7a 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e04e      	b.n	8001ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d022      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d01d      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d018      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <HAL_TIM_Base_Start_IT+0xcc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d010      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	e007      	b.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40001800 	.word	0x40001800

08001f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f839 	bl	8001f9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 fbba 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_TIM_PWM_Start+0x24>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e022      	b.n	800201e <HAL_TIM_PWM_Start+0x6a>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d109      	bne.n	8001ff2 <HAL_TIM_PWM_Start+0x3e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	e015      	b.n	800201e <HAL_TIM_PWM_Start+0x6a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d109      	bne.n	800200c <HAL_TIM_PWM_Start+0x58>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e008      	b.n	800201e <HAL_TIM_PWM_Start+0x6a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07c      	b.n	8002120 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <HAL_TIM_PWM_Start+0x82>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002034:	e013      	b.n	800205e <HAL_TIM_PWM_Start+0xaa>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d104      	bne.n	8002046 <HAL_TIM_PWM_Start+0x92>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002044:	e00b      	b.n	800205e <HAL_TIM_PWM_Start+0xaa>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d104      	bne.n	8002056 <HAL_TIM_PWM_Start+0xa2>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002054:	e003      	b.n	800205e <HAL_TIM_PWM_Start+0xaa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fe10 	bl	8002c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <HAL_TIM_PWM_Start+0x174>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_TIM_PWM_Start+0xcc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <HAL_TIM_PWM_Start+0x178>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_TIM_PWM_Start+0xd0>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_TIM_PWM_Start+0xd2>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_TIM_PWM_Start+0x174>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d022      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d01d      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_TIM_PWM_Start+0x17c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d018      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_TIM_PWM_Start+0x180>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_TIM_PWM_Start+0x184>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00e      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_TIM_PWM_Start+0x178>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_TIM_PWM_Start+0x188>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_TIM_PWM_Start+0x136>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_TIM_PWM_Start+0x18c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d111      	bne.n	800210e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d010      	beq.n	800211e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	e007      	b.n	800211e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40010000 	.word	0x40010000
 800212c:	40010400 	.word	0x40010400
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40014000 	.word	0x40014000
 8002140:	40001800 	.word	0x40001800

08002144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b02      	cmp	r3, #2
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0202 	mvn.w	r2, #2
 8002170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa77 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa69 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa7a 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d122      	bne.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d11b      	bne.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0204 	mvn.w	r2, #4
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fa4d 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa3f 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fa50 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b08      	cmp	r3, #8
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0208 	mvn.w	r2, #8
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2204      	movs	r2, #4
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa23 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa15 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fa26 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b10      	cmp	r3, #16
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b10      	cmp	r3, #16
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0210 	mvn.w	r2, #16
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2208      	movs	r2, #8
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9f9 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9eb 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9fc 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0201 	mvn.w	r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fafe 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b80      	cmp	r3, #128	; 0x80
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fd78 	bl	8002de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d107      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9c1 	bl	80026a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b20      	cmp	r3, #32
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0220 	mvn.w	r2, #32
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fd42 	bl	8002dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800236e:	2302      	movs	r3, #2
 8002370:	e0ae      	b.n	80024d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	f200 809f 	bhi.w	80024c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	080023bd 	.word	0x080023bd
 800238c:	080024c1 	.word	0x080024c1
 8002390:	080024c1 	.word	0x080024c1
 8002394:	080024c1 	.word	0x080024c1
 8002398:	080023fd 	.word	0x080023fd
 800239c:	080024c1 	.word	0x080024c1
 80023a0:	080024c1 	.word	0x080024c1
 80023a4:	080024c1 	.word	0x080024c1
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	080024c1 	.word	0x080024c1
 80023b0:	080024c1 	.word	0x080024c1
 80023b4:	080024c1 	.word	0x080024c1
 80023b8:	0800247f 	.word	0x0800247f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fa18 	bl	80027f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	619a      	str	r2, [r3, #24]
      break;
 80023fa:	e064      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fa68 	bl	80028d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6999      	ldr	r1, [r3, #24]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	021a      	lsls	r2, r3, #8
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	619a      	str	r2, [r3, #24]
      break;
 800243c:	e043      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fabd 	bl	80029c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0208 	orr.w	r2, r2, #8
 8002458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0204 	bic.w	r2, r2, #4
 8002468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
      break;
 800247c:	e023      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fb11 	bl	8002aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69d9      	ldr	r1, [r3, #28]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	61da      	str	r2, [r3, #28]
      break;
 80024be:	e002      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
      break;
 80024c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0b4      	b.n	800265e <HAL_TIM_ConfigClockSource+0x186>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252c:	d03e      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0xd4>
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	f200 8087 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	f000 8086 	beq.w	800264a <HAL_TIM_ConfigClockSource+0x172>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d87f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d01a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xa6>
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d87b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d050      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	d877      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b50      	cmp	r3, #80	; 0x50
 8002556:	d03c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d873      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d058      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x13a>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d86f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d064      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	2b30      	cmp	r3, #48	; 0x30
 800256a:	d86b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d060      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d867      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b10      	cmp	r3, #16
 800257a:	d05a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	e062      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f000 fb5d 	bl	8002c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
      break;
 80025aa:	e04f      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f000 fb46 	bl	8002c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ce:	609a      	str	r2, [r3, #8]
      break;
 80025d0:	e03c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 faba 	bl	8002b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2150      	movs	r1, #80	; 0x50
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fb13 	bl	8002c16 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e02c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 fad9 	bl	8002bb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2160      	movs	r1, #96	; 0x60
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fb03 	bl	8002c16 <TIM_ITRx_SetConfig>
      break;
 8002610:	e01c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 fa9a 	bl	8002b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 faf3 	bl	8002c16 <TIM_ITRx_SetConfig>
      break;
 8002630:	e00c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 faea 	bl	8002c16 <TIM_ITRx_SetConfig>
      break;
 8002642:	e003      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e000      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800264a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d00f      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <TIM_Base_SetConfig+0x114>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d027      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d023      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TIM_Base_SetConfig+0x124>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d017      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0x128>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <TIM_Base_SetConfig+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0x130>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0x134>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <TIM_Base_SetConfig+0x138>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <TIM_Base_SetConfig+0x13c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <TIM_Base_SetConfig+0xf8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	40001800 	.word	0x40001800
 80027f0:	40001c00 	.word	0x40001c00
 80027f4:	40002000 	.word	0x40002000

080027f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 0302 	bic.w	r3, r3, #2
 8002840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <TIM_OC1_SetConfig+0xd8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_OC1_SetConfig+0x64>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <TIM_OC1_SetConfig+0xdc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10c      	bne.n	8002876 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0308 	bic.w	r3, r3, #8
 8002862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <TIM_OC1_SetConfig+0xd8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <TIM_OC1_SetConfig+0x8e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <TIM_OC1_SetConfig+0xdc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40010400 	.word	0x40010400

080028d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f023 0210 	bic.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0320 	bic.w	r3, r3, #32
 8002922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a22      	ldr	r2, [pc, #136]	; (80029bc <TIM_OC2_SetConfig+0xe4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_OC2_SetConfig+0x68>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <TIM_OC2_SetConfig+0xe8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d10d      	bne.n	800295c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <TIM_OC2_SetConfig+0xe4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_OC2_SetConfig+0x94>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <TIM_OC2_SetConfig+0xe8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d113      	bne.n	8002994 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40010400 	.word	0x40010400

080029c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <TIM_OC3_SetConfig+0xe0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_OC3_SetConfig+0x66>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <TIM_OC3_SetConfig+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10d      	bne.n	8002a46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <TIM_OC3_SetConfig+0xe0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_OC3_SetConfig+0x92>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <TIM_OC3_SetConfig+0xe4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40010400 	.word	0x40010400

08002aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	031b      	lsls	r3, r3, #12
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <TIM_OC4_SetConfig+0xa4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_OC4_SetConfig+0x68>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <TIM_OC4_SetConfig+0xa8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d109      	bne.n	8002b28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010400 	.word	0x40010400

08002b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f023 0201 	bic.w	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f023 030a 	bic.w	r3, r3, #10
 8002b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0210 	bic.w	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f043 0307 	orr.w	r3, r3, #7
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1a      	ldr	r2, [r3, #32]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e05a      	b.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d01d      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10c      	bne.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40010400 	.word	0x40010400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40001800 	.word	0x40001800

08002dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e03f      	b.n	8002e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fdf2 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f829 	bl	8002e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e98:	b09f      	sub	sp, #124	; 0x7c
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	ea40 0301 	orr.w	r3, r0, r1
 8002eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ed8:	f021 010c 	bic.w	r1, r1, #12
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	ea40 0301 	orr.w	r3, r0, r1
 8002efc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4bc5      	ldr	r3, [pc, #788]	; (8003218 <UART_SetConfig+0x384>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d004      	beq.n	8002f12 <UART_SetConfig+0x7e>
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4bc3      	ldr	r3, [pc, #780]	; (800321c <UART_SetConfig+0x388>)
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d103      	bne.n	8002f1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f12:	f7fe fa9f 	bl	8001454 <HAL_RCC_GetPCLK2Freq>
 8002f16:	6778      	str	r0, [r7, #116]	; 0x74
 8002f18:	e002      	b.n	8002f20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f1a:	f7fe fa87 	bl	800142c <HAL_RCC_GetPCLK1Freq>
 8002f1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	f040 80b6 	bne.w	8003098 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2e:	461c      	mov	r4, r3
 8002f30:	f04f 0500 	mov.w	r5, #0
 8002f34:	4622      	mov	r2, r4
 8002f36:	462b      	mov	r3, r5
 8002f38:	1891      	adds	r1, r2, r2
 8002f3a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f3c:	415b      	adcs	r3, r3
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f44:	1912      	adds	r2, r2, r4
 8002f46:	eb45 0303 	adc.w	r3, r5, r3
 8002f4a:	f04f 0000 	mov.w	r0, #0
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	00d9      	lsls	r1, r3, #3
 8002f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f58:	00d0      	lsls	r0, r2, #3
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	1911      	adds	r1, r2, r4
 8002f60:	6639      	str	r1, [r7, #96]	; 0x60
 8002f62:	416b      	adcs	r3, r5
 8002f64:	667b      	str	r3, [r7, #100]	; 0x64
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f74:	415b      	adcs	r3, r3
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f80:	f7fd f946 	bl	8000210 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4ba5      	ldr	r3, [pc, #660]	; (8003220 <UART_SetConfig+0x38c>)
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	011e      	lsls	r6, r3, #4
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	461c      	mov	r4, r3
 8002f96:	f04f 0500 	mov.w	r5, #0
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	1891      	adds	r1, r2, r2
 8002fa0:	6339      	str	r1, [r7, #48]	; 0x30
 8002fa2:	415b      	adcs	r3, r3
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002faa:	1912      	adds	r2, r2, r4
 8002fac:	eb45 0303 	adc.w	r3, r5, r3
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	00d9      	lsls	r1, r3, #3
 8002fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fbe:	00d0      	lsls	r0, r2, #3
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	1911      	adds	r1, r2, r4
 8002fc6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc8:	416b      	adcs	r3, r5
 8002fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	1891      	adds	r1, r2, r2
 8002fd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fda:	415b      	adcs	r3, r3
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fe2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002fe6:	f7fd f913 	bl	8000210 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <UART_SetConfig+0x38c>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	2164      	movs	r1, #100	; 0x64
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3332      	adds	r3, #50	; 0x32
 8003002:	4a87      	ldr	r2, [pc, #540]	; (8003220 <UART_SetConfig+0x38c>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003010:	441e      	add	r6, r3
 8003012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003014:	4618      	mov	r0, r3
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	1894      	adds	r4, r2, r2
 8003020:	623c      	str	r4, [r7, #32]
 8003022:	415b      	adcs	r3, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800302a:	1812      	adds	r2, r2, r0
 800302c:	eb41 0303 	adc.w	r3, r1, r3
 8003030:	f04f 0400 	mov.w	r4, #0
 8003034:	f04f 0500 	mov.w	r5, #0
 8003038:	00dd      	lsls	r5, r3, #3
 800303a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800303e:	00d4      	lsls	r4, r2, #3
 8003040:	4622      	mov	r2, r4
 8003042:	462b      	mov	r3, r5
 8003044:	1814      	adds	r4, r2, r0
 8003046:	653c      	str	r4, [r7, #80]	; 0x50
 8003048:	414b      	adcs	r3, r1
 800304a:	657b      	str	r3, [r7, #84]	; 0x54
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	1891      	adds	r1, r2, r2
 8003058:	61b9      	str	r1, [r7, #24]
 800305a:	415b      	adcs	r3, r3
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003062:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003066:	f7fd f8d3 	bl	8000210 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <UART_SetConfig+0x38c>)
 8003070:	fba3 1302 	umull	r1, r3, r3, r2
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	2164      	movs	r1, #100	; 0x64
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	3332      	adds	r3, #50	; 0x32
 8003082:	4a67      	ldr	r2, [pc, #412]	; (8003220 <UART_SetConfig+0x38c>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	f003 0207 	and.w	r2, r3, #7
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4432      	add	r2, r6
 8003094:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003096:	e0b9      	b.n	800320c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309a:	461c      	mov	r4, r3
 800309c:	f04f 0500 	mov.w	r5, #0
 80030a0:	4622      	mov	r2, r4
 80030a2:	462b      	mov	r3, r5
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	6139      	str	r1, [r7, #16]
 80030a8:	415b      	adcs	r3, r3
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030b0:	1912      	adds	r2, r2, r4
 80030b2:	eb45 0303 	adc.w	r3, r5, r3
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	00d9      	lsls	r1, r3, #3
 80030c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c4:	00d0      	lsls	r0, r2, #3
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	eb12 0804 	adds.w	r8, r2, r4
 80030ce:	eb43 0905 	adc.w	r9, r3, r5
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	008b      	lsls	r3, r1, #2
 80030e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030ea:	0082      	lsls	r2, r0, #2
 80030ec:	4640      	mov	r0, r8
 80030ee:	4649      	mov	r1, r9
 80030f0:	f7fd f88e 	bl	8000210 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4b49      	ldr	r3, [pc, #292]	; (8003220 <UART_SetConfig+0x38c>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011e      	lsls	r6, r3, #4
 8003102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003104:	4618      	mov	r0, r3
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	1894      	adds	r4, r2, r2
 8003110:	60bc      	str	r4, [r7, #8]
 8003112:	415b      	adcs	r3, r3
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311a:	1812      	adds	r2, r2, r0
 800311c:	eb41 0303 	adc.w	r3, r1, r3
 8003120:	f04f 0400 	mov.w	r4, #0
 8003124:	f04f 0500 	mov.w	r5, #0
 8003128:	00dd      	lsls	r5, r3, #3
 800312a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800312e:	00d4      	lsls	r4, r2, #3
 8003130:	4622      	mov	r2, r4
 8003132:	462b      	mov	r3, r5
 8003134:	1814      	adds	r4, r2, r0
 8003136:	64bc      	str	r4, [r7, #72]	; 0x48
 8003138:	414b      	adcs	r3, r1
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	008b      	lsls	r3, r1, #2
 8003150:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003154:	0082      	lsls	r2, r0, #2
 8003156:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800315a:	f7fd f859 	bl	8000210 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <UART_SetConfig+0x38c>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	; 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	3332      	adds	r3, #50	; 0x32
 8003176:	4a2a      	ldr	r2, [pc, #168]	; (8003220 <UART_SetConfig+0x38c>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003182:	441e      	add	r6, r3
 8003184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003186:	4618      	mov	r0, r3
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	1894      	adds	r4, r2, r2
 8003192:	603c      	str	r4, [r7, #0]
 8003194:	415b      	adcs	r3, r3
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800319c:	1812      	adds	r2, r2, r0
 800319e:	eb41 0303 	adc.w	r3, r1, r3
 80031a2:	f04f 0400 	mov.w	r4, #0
 80031a6:	f04f 0500 	mov.w	r5, #0
 80031aa:	00dd      	lsls	r5, r3, #3
 80031ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031b0:	00d4      	lsls	r4, r2, #3
 80031b2:	4622      	mov	r2, r4
 80031b4:	462b      	mov	r3, r5
 80031b6:	eb12 0a00 	adds.w	sl, r2, r0
 80031ba:	eb43 0b01 	adc.w	fp, r3, r1
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031d6:	0082      	lsls	r2, r0, #2
 80031d8:	4650      	mov	r0, sl
 80031da:	4659      	mov	r1, fp
 80031dc:	f7fd f818 	bl	8000210 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <UART_SetConfig+0x38c>)
 80031e6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2164      	movs	r1, #100	; 0x64
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a09      	ldr	r2, [pc, #36]	; (8003220 <UART_SetConfig+0x38c>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4432      	add	r2, r6
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	377c      	adds	r7, #124	; 0x7c
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003216:	bf00      	nop
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	51eb851f 	.word	0x51eb851f

08003224 <__NVIC_SetPriority>:
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db0a      	blt.n	800324e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	490c      	ldr	r1, [pc, #48]	; (8003270 <__NVIC_SetPriority+0x4c>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	440b      	add	r3, r1
 8003248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800324c:	e00a      	b.n	8003264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <__NVIC_SetPriority+0x50>)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	3b04      	subs	r3, #4
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	440b      	add	r3, r1
 8003262:	761a      	strb	r2, [r3, #24]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Handler+0x1c>)
 800327e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003280:	f001 fcfe 	bl	8004c80 <xTaskGetSchedulerState>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800328a:	f002 fae5 	bl	8005858 <xPortSysTickHandler>
  }
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800329c:	2100      	movs	r1, #0
 800329e:	f06f 0004 	mvn.w	r0, #4
 80032a2:	f7ff ffbf 	bl	8003224 <__NVIC_SetPriority>
#endif
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b2:	f3ef 8305 	mrs	r3, IPSR
 80032b6:	603b      	str	r3, [r7, #0]
  return(result);
 80032b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032be:	f06f 0305 	mvn.w	r3, #5
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	e00c      	b.n	80032e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <osKernelInitialize+0x44>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <osKernelInitialize+0x44>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	e002      	b.n	80032e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032e0:	687b      	ldr	r3, [r7, #4]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000002c 	.word	0x2000002c

080032f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032fa:	f3ef 8305 	mrs	r3, IPSR
 80032fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003306:	f06f 0305 	mvn.w	r3, #5
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e010      	b.n	8003330 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <osKernelStart+0x48>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d109      	bne.n	800332a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003316:	f7ff ffbf 	bl	8003298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <osKernelStart+0x48>)
 800331c:	2202      	movs	r2, #2
 800331e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003320:	f001 f866 	bl	80043f0 <vTaskStartScheduler>
      stat = osOK;
 8003324:	2300      	movs	r3, #0
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e002      	b.n	8003330 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000002c 	.word	0x2000002c

08003340 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af04      	add	r7, sp, #16
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003350:	f3ef 8305 	mrs	r3, IPSR
 8003354:	617b      	str	r3, [r7, #20]
  return(result);
 8003356:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003358:	2b00      	cmp	r3, #0
 800335a:	d17e      	bne.n	800345a <osThreadNew+0x11a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07b      	beq.n	800345a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003366:	2318      	movs	r3, #24
 8003368:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d045      	beq.n	8003406 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <osThreadNew+0x48>
        name = attr->name;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <osThreadNew+0x6e>
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b38      	cmp	r3, #56	; 0x38
 80033a0:	d805      	bhi.n	80033ae <osThreadNew+0x6e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <osThreadNew+0x72>
        return (NULL);
 80033ae:	2300      	movs	r3, #0
 80033b0:	e054      	b.n	800345c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <osThreadNew+0xa8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b5b      	cmp	r3, #91	; 0x5b
 80033d0:	d90a      	bls.n	80033e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <osThreadNew+0xa8>
        mem = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e010      	b.n	800340a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10c      	bne.n	800340a <osThreadNew+0xca>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <osThreadNew+0xca>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <osThreadNew+0xca>
          mem = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e001      	b.n	800340a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d110      	bne.n	8003432 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003418:	9202      	str	r2, [sp, #8]
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6a3a      	ldr	r2, [r7, #32]
 8003424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fe0c 	bl	8004044 <xTaskCreateStatic>
 800342c:	4603      	mov	r3, r0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	e013      	b.n	800345a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d110      	bne.n	800345a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	b29a      	uxth	r2, r3
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fe57 	bl	80040fe <xTaskCreate>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <osThreadNew+0x11a>
            hTask = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800345a:	693b      	ldr	r3, [r7, #16]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800346c:	f3ef 8305 	mrs	r3, IPSR
 8003470:	60bb      	str	r3, [r7, #8]
  return(result);
 8003472:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <osDelay+0x1c>
    stat = osErrorISR;
 8003478:	f06f 0305 	mvn.w	r3, #5
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e007      	b.n	8003490 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <osDelay+0x2c>
      vTaskDelay(ticks);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 ff7c 	bl	8004388 <vTaskDelay>
    }
  }

  return (stat);
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a06      	ldr	r2, [pc, #24]	; (80034cc <vApplicationGetIdleTaskMemory+0x30>)
 80034b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000030 	.word	0x20000030
 80034cc:	2000008c 	.word	0x2000008c

080034d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <vApplicationGetTimerTaskMemory+0x2c>)
 80034e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a06      	ldr	r2, [pc, #24]	; (8003500 <vApplicationGetTimerTaskMemory+0x30>)
 80034e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ee:	601a      	str	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	2000028c 	.word	0x2000028c
 8003500:	200002e8 	.word	0x200002e8

08003504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f103 0208 	add.w	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f103 0208 	add.w	r2, r3, #8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0208 	add.w	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d103      	bne.n	80035c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e00c      	b.n	80035e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3308      	adds	r3, #8
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e002      	b.n	80035d4 <vListInsert+0x2e>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d2f6      	bcs.n	80035ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6892      	ldr	r2, [r2, #8]
 800362e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6852      	ldr	r2, [r2, #4]
 8003638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d103      	bne.n	800364c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	1e5a      	subs	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003696:	f002 f84d 	bl	8005734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	3b01      	subs	r3, #1
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	441a      	add	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d114      	bne.n	8003716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3310      	adds	r3, #16
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f903 	bl	8004904 <xTaskRemoveFromEventList>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d012      	beq.n	800372a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <xQueueGenericReset+0xcc>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	e009      	b.n	800372a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3310      	adds	r3, #16
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fef2 	bl	8003504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff feed 	bl	8003504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800372a:	f002 f833 	bl	8005794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <xQueueGenericCreateStatic+0x52>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <xQueueGenericCreateStatic+0x56>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGenericCreateStatic+0x58>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	623b      	str	r3, [r7, #32]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <xQueueGenericCreateStatic+0x7e>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <xQueueGenericCreateStatic+0x82>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <xQueueGenericCreateStatic+0x84>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	61fb      	str	r3, [r7, #28]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037da:	2350      	movs	r3, #80	; 0x50
 80037dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d00a      	beq.n	80037fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	61bb      	str	r3, [r7, #24]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800380e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f805 	bl	800382c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003824:	4618      	mov	r0, r3
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385a:	2101      	movs	r1, #1
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f7ff ff05 	bl	800366c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueGenericSend+0x32>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <xQueueGenericSend+0x40>
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <xQueueGenericSend+0x44>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <xQueueGenericSend+0x46>
 80038b8:	2300      	movs	r3, #0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <xQueueGenericSend+0x60>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x6e>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <xQueueGenericSend+0x72>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericSend+0x74>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericSend+0x8e>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	623b      	str	r3, [r7, #32]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003902:	f001 f9bd 	bl	8004c80 <xTaskGetSchedulerState>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <xQueueGenericSend+0x9e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <xQueueGenericSend+0xa2>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <xQueueGenericSend+0xa4>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xQueueGenericSend+0xbe>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	61fb      	str	r3, [r7, #28]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003932:	f001 feff 	bl	8005734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <xQueueGenericSend+0xd4>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d129      	bne.n	800399c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f000 fa0b 	bl	8003d68 <prvCopyDataToQueue>
 8003952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ffcf 	bl	8004904 <xTaskRemoveFromEventList>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800396c:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <xQueueGenericSend+0x1f8>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	e00a      	b.n	8003994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003984:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <xQueueGenericSend+0x1f8>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003994:	f001 fefe 	bl	8005794 <vPortExitCritical>
				return pdPASS;
 8003998:	2301      	movs	r3, #1
 800399a:	e063      	b.n	8003a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039a2:	f001 fef7 	bl	8005794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e05c      	b.n	8003a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f809 	bl	80049cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039be:	f001 fee9 	bl	8005794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c2:	f000 fd7b 	bl	80044bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039c6:	f001 feb5 	bl	8005734 <vPortEnterCritical>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d103      	bne.n	80039e0 <xQueueGenericSend+0x16c>
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d103      	bne.n	80039f6 <xQueueGenericSend+0x182>
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f6:	f001 fecd 	bl	8005794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039fa:	1d3a      	adds	r2, r7, #4
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fff8 	bl	80049f8 <xTaskCheckForTimeOut>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d124      	bne.n	8003a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a10:	f000 faa2 	bl	8003f58 <prvIsQueueFull>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 ff1e 	bl	8004864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2a:	f000 fa2d 	bl	8003e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a2e:	f000 fd53 	bl	80044d8 <xTaskResumeAll>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af7c 	bne.w	8003932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <xQueueGenericSend+0x1f8>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	e772      	b.n	8003932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4e:	f000 fa1b 	bl	8003e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a52:	f000 fd41 	bl	80044d8 <xTaskResumeAll>
 8003a56:	e76c      	b.n	8003932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5a:	f000 fa15 	bl	8003e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a5e:	f000 fd3b 	bl	80044d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3738      	adds	r7, #56	; 0x38
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b090      	sub	sp, #64	; 0x40
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <xQueueGenericSendFromISR+0x3c>
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x40>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <xQueueGenericSendFromISR+0x42>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSendFromISR+0x6a>
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <xQueueGenericSendFromISR+0x6e>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericSendFromISR+0x70>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003afa:	f001 fefd 	bl	80058f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003afe:	f3ef 8211 	mrs	r2, BASEPRI
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	61fa      	str	r2, [r7, #28]
 8003b14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <xQueueGenericSendFromISR+0xbc>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d12f      	bne.n	8003b8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b42:	f000 f911 	bl	8003d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d112      	bne.n	8003b76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d016      	beq.n	8003b86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fed1 	bl	8004904 <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e007      	b.n	8003b86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	b25a      	sxtb	r2, r3
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b86:	2301      	movs	r3, #1
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b8a:	e001      	b.n	8003b90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3740      	adds	r7, #64	; 0x40
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <xQueueReceive+0x30>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	623b      	str	r3, [r7, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueReceive+0x3e>
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueReceive+0x42>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueReceive+0x44>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueReceive+0x5e>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	61fb      	str	r3, [r7, #28]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c06:	f001 f83b 	bl	8004c80 <xTaskGetSchedulerState>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <xQueueReceive+0x6e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <xQueueReceive+0x72>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xQueueReceive+0x74>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueReceive+0x8e>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61bb      	str	r3, [r7, #24]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c36:	f001 fd7d 	bl	8005734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01f      	beq.n	8003c86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4a:	f000 f8f7 	bl	8003e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1e5a      	subs	r2, r3, #1
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00f      	beq.n	8003c7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	3310      	adds	r3, #16
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fe4e 	bl	8004904 <xTaskRemoveFromEventList>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <xQueueReceive+0x1bc>)
 8003c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c7e:	f001 fd89 	bl	8005794 <vPortExitCritical>
				return pdPASS;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e069      	b.n	8003d5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c8c:	f001 fd82 	bl	8005794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e062      	b.n	8003d5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fe94 	bl	80049cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca8:	f001 fd74 	bl	8005794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cac:	f000 fc06 	bl	80044bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb0:	f001 fd40 	bl	8005734 <vPortEnterCritical>
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d103      	bne.n	8003cca <xQueueReceive+0x122>
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd0:	b25b      	sxtb	r3, r3
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d103      	bne.n	8003ce0 <xQueueReceive+0x138>
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce0:	f001 fd58 	bl	8005794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce4:	1d3a      	adds	r2, r7, #4
 8003ce6:	f107 0310 	add.w	r3, r7, #16
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fe83 	bl	80049f8 <xTaskCheckForTimeOut>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d123      	bne.n	8003d40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfa:	f000 f917 	bl	8003f2c <prvIsQueueEmpty>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fda9 	bl	8004864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d14:	f000 f8b8 	bl	8003e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d18:	f000 fbde 	bl	80044d8 <xTaskResumeAll>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d189      	bne.n	8003c36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <xQueueReceive+0x1bc>)
 8003d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	e780      	b.n	8003c36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d36:	f000 f8a7 	bl	8003e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3a:	f000 fbcd 	bl	80044d8 <xTaskResumeAll>
 8003d3e:	e77a      	b.n	8003c36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d42:	f000 f8a1 	bl	8003e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d46:	f000 fbc7 	bl	80044d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4c:	f000 f8ee 	bl	8003f2c <prvIsQueueEmpty>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f43f af6f 	beq.w	8003c36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3730      	adds	r7, #48	; 0x30
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d14d      	bne.n	8003e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 ff92 	bl	8004cbc <xTaskPriorityDisinherit>
 8003d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	e043      	b.n	8003e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d119      	bne.n	8003ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6858      	ldr	r0, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	461a      	mov	r2, r3
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	f001 ffee 	bl	8005d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d32b      	bcc.n	8003e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e026      	b.n	8003e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68d8      	ldr	r0, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	461a      	mov	r2, r3
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	f001 ffd4 	bl	8005d94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	425b      	negs	r3, r3
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d207      	bcs.n	8003e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	425b      	negs	r3, r3
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d105      	bne.n	8003e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e32:	697b      	ldr	r3, [r7, #20]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d303      	bcc.n	8003e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68d9      	ldr	r1, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f001 ff8a 	bl	8005d94 <memcpy>
	}
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e90:	f001 fc50 	bl	8005734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e9c:	e011      	b.n	8003ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fd2a 	bl	8004904 <xTaskRemoveFromEventList>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eb6:	f000 fe01 	bl	8004abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	dce9      	bgt.n	8003e9e <prvUnlockQueue+0x16>
 8003eca:	e000      	b.n	8003ece <prvUnlockQueue+0x46>
					break;
 8003ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	22ff      	movs	r2, #255	; 0xff
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ed6:	f001 fc5d 	bl	8005794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eda:	f001 fc2b 	bl	8005734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ee6:	e011      	b.n	8003f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3310      	adds	r3, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fd05 	bl	8004904 <xTaskRemoveFromEventList>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f00:	f000 fddc 	bl	8004abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dce9      	bgt.n	8003ee8 <prvUnlockQueue+0x60>
 8003f14:	e000      	b.n	8003f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f20:	f001 fc38 	bl	8005794 <vPortExitCritical>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f34:	f001 fbfe 	bl	8005734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e001      	b.n	8003f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 fc23 	bl	8005794 <vPortExitCritical>

	return xReturn;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f60:	f001 fbe8 	bl	8005734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d102      	bne.n	8003f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e001      	b.n	8003f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f7a:	f001 fc0b 	bl	8005794 <vPortExitCritical>

	return xReturn;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e014      	b.n	8003fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f98:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <vQueueAddToRegistry+0x50>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fa4:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <vQueueAddToRegistry+0x50>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <vQueueAddToRegistry+0x50>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fba:	e006      	b.n	8003fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b07      	cmp	r3, #7
 8003fc6:	d9e7      	bls.n	8003f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20004a1c 	.word	0x20004a1c

08003fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fec:	f001 fba2 	bl	8005734 <vPortEnterCritical>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff6:	b25b      	sxtb	r3, r3
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d103      	bne.n	8004006 <vQueueWaitForMessageRestricted+0x2a>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d103      	bne.n	800401c <vQueueWaitForMessageRestricted+0x40>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401c:	f001 fbba 	bl	8005794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fc3b 	bl	80048ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff26 	bl	8003e88 <prvUnlockQueue>
	}
 800403c:	bf00      	nop
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08e      	sub	sp, #56	; 0x38
 8004048:	af04      	add	r7, sp, #16
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	623b      	str	r3, [r7, #32]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xTaskCreateStatic+0x46>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	61fb      	str	r3, [r7, #28]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800408a:	235c      	movs	r3, #92	; 0x5c
 800408c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b5c      	cmp	r3, #92	; 0x5c
 8004092:	d00a      	beq.n	80040aa <xTaskCreateStatic+0x66>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	61bb      	str	r3, [r7, #24]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01e      	beq.n	80040f0 <xTaskCreateStatic+0xac>
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040ca:	2300      	movs	r3, #0
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f850 	bl	8004188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ea:	f000 f8dd 	bl	80042a8 <prvAddNewTaskToReadyList>
 80040ee:	e001      	b.n	80040f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040f4:	697b      	ldr	r3, [r7, #20]
	}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b08c      	sub	sp, #48	; 0x30
 8004102:	af04      	add	r7, sp, #16
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fc30 	bl	8005978 <pvPortMalloc>
 8004118:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004120:	205c      	movs	r0, #92	; 0x5c
 8004122:	f001 fc29 	bl	8005978 <pvPortMalloc>
 8004126:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
 8004134:	e005      	b.n	8004142 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f001 fcea 	bl	8005b10 <vPortFree>
 800413c:	e001      	b.n	8004142 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d017      	beq.n	8004178 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	2300      	movs	r3, #0
 8004154:	9303      	str	r3, [sp, #12]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f80e 	bl	8004188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416c:	69f8      	ldr	r0, [r7, #28]
 800416e:	f000 f89b 	bl	80042a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e002      	b.n	800417e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004178:	f04f 33ff 	mov.w	r3, #4294967295
 800417c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800417e:	69bb      	ldr	r3, [r7, #24]
	}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	461a      	mov	r2, r3
 80041a0:	21a5      	movs	r1, #165	; 0xa5
 80041a2:	f001 fe05 	bl	8005db0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b0:	3b01      	subs	r3, #1
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	617b      	str	r3, [r7, #20]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e012      	b.n	8004212 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	7819      	ldrb	r1, [r3, #0]
 80041f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	3334      	adds	r3, #52	; 0x34
 80041fc:	460a      	mov	r2, r1
 80041fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d9e9      	bls.n	80041ec <prvInitialiseNewTask+0x64>
 8004218:	e000      	b.n	800421c <prvInitialiseNewTask+0x94>
			{
				break;
 800421a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	e003      	b.n	800422e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	2b37      	cmp	r3, #55	; 0x37
 8004232:	d901      	bls.n	8004238 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004234:	2337      	movs	r3, #55	; 0x37
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f978 	bl	8003544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	3318      	adds	r3, #24
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff f973 	bl	8003544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	69b8      	ldr	r0, [r7, #24]
 8004288:	f001 f928 	bl	80054dc <pxPortInitialiseStack>
 800428c:	4602      	mov	r2, r0
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800429e:	bf00      	nop
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042b0:	f001 fa40 	bl	8005734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <prvAddNewTaskToReadyList+0xc4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a2c      	ldr	r2, [pc, #176]	; (800436c <prvAddNewTaskToReadyList+0xc4>)
 80042bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042be:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <prvAddNewTaskToReadyList+0xc8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042c6:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <prvAddNewTaskToReadyList+0xc8>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <prvAddNewTaskToReadyList+0xc4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d110      	bne.n	80042f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042d4:	f000 fc16 	bl	8004b04 <prvInitialiseTaskLists>
 80042d8:	e00d      	b.n	80042f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <prvAddNewTaskToReadyList+0xcc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <prvAddNewTaskToReadyList+0xc8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d802      	bhi.n	80042f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <prvAddNewTaskToReadyList+0xc8>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <prvAddNewTaskToReadyList+0xd0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <prvAddNewTaskToReadyList+0xd0>)
 80042fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <prvAddNewTaskToReadyList+0xd0>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <prvAddNewTaskToReadyList+0xd4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d903      	bls.n	800431c <prvAddNewTaskToReadyList+0x74>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <prvAddNewTaskToReadyList+0xd4>)
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <prvAddNewTaskToReadyList+0xd8>)
 800432a:	441a      	add	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7ff f913 	bl	800355e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004338:	f001 fa2c 	bl	8005794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <prvAddNewTaskToReadyList+0xcc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <prvAddNewTaskToReadyList+0xc8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	429a      	cmp	r2, r3
 8004350:	d207      	bcs.n	8004362 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <prvAddNewTaskToReadyList+0xdc>)
 8004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000bbc 	.word	0x20000bbc
 8004370:	200006e8 	.word	0x200006e8
 8004374:	20000bc8 	.word	0x20000bc8
 8004378:	20000bd8 	.word	0x20000bd8
 800437c:	20000bc4 	.word	0x20000bc4
 8004380:	200006ec 	.word	0x200006ec
 8004384:	e000ed04 	.word	0xe000ed04

08004388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <vTaskDelay+0x60>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <vTaskDelay+0x30>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043b8:	f000 f880 	bl	80044bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043bc:	2100      	movs	r1, #0
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fcea 	bl	8004d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043c4:	f000 f888 	bl	80044d8 <xTaskResumeAll>
 80043c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d107      	bne.n	80043e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <vTaskDelay+0x64>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000be4 	.word	0x20000be4
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043fe:	463a      	mov	r2, r7
 8004400:	1d39      	adds	r1, r7, #4
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff f848 	bl	800349c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	9202      	str	r2, [sp, #8]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	2300      	movs	r3, #0
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	2300      	movs	r3, #0
 800441c:	460a      	mov	r2, r1
 800441e:	4921      	ldr	r1, [pc, #132]	; (80044a4 <vTaskStartScheduler+0xb4>)
 8004420:	4821      	ldr	r0, [pc, #132]	; (80044a8 <vTaskStartScheduler+0xb8>)
 8004422:	f7ff fe0f 	bl	8004044 <xTaskCreateStatic>
 8004426:	4603      	mov	r3, r0
 8004428:	4a20      	ldr	r2, [pc, #128]	; (80044ac <vTaskStartScheduler+0xbc>)
 800442a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <vTaskStartScheduler+0xbc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e001      	b.n	800443e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004444:	f000 fcfc 	bl	8004e40 <xTimerCreateTimerTask>
 8004448:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d116      	bne.n	800447e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
}
 8004462:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <vTaskStartScheduler+0xc0>)
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <vTaskStartScheduler+0xc4>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <vTaskStartScheduler+0xc8>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004478:	f001 f8ba 	bl	80055f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800447c:	e00e      	b.n	800449c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d10a      	bne.n	800449c <vTaskStartScheduler+0xac>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vTaskStartScheduler+0xaa>
}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08005de8 	.word	0x08005de8
 80044a8:	08004ad5 	.word	0x08004ad5
 80044ac:	20000be0 	.word	0x20000be0
 80044b0:	20000bdc 	.word	0x20000bdc
 80044b4:	20000bc8 	.word	0x20000bc8
 80044b8:	20000bc0 	.word	0x20000bc0

080044bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <vTaskSuspendAll+0x18>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <vTaskSuspendAll+0x18>)
 80044c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20000be4 	.word	0x20000be4

080044d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044e6:	4b42      	ldr	r3, [pc, #264]	; (80045f0 <xTaskResumeAll+0x118>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <xTaskResumeAll+0x2c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004504:	f001 f916 	bl	8005734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <xTaskResumeAll+0x118>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <xTaskResumeAll+0x118>)
 8004510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <xTaskResumeAll+0x118>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d162      	bne.n	80045e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <xTaskResumeAll+0x11c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d05e      	beq.n	80045e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004522:	e02f      	b.n	8004584 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004524:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <xTaskResumeAll+0x120>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3318      	adds	r3, #24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f871 	bl	8003618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f86c 	bl	8003618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <xTaskResumeAll+0x124>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d903      	bls.n	8004554 <xTaskResumeAll+0x7c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <xTaskResumeAll+0x124>)
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <xTaskResumeAll+0x128>)
 8004562:	441a      	add	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f7fe fff7 	bl	800355e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <xTaskResumeAll+0x12c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <xTaskResumeAll+0x130>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <xTaskResumeAll+0x120>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1cb      	bne.n	8004524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004592:	f000 fb55 	bl	8004c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <xTaskResumeAll+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045a2:	f000 f847 	bl	8004634 <xTaskIncrementTick>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <xTaskResumeAll+0x130>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f1      	bne.n	80045a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <xTaskResumeAll+0x134>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <xTaskResumeAll+0x130>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045cc:	2301      	movs	r3, #1
 80045ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <xTaskResumeAll+0x138>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 f8d8 	bl	8005794 <vPortExitCritical>

	return xAlreadyYielded;
 80045e4:	68bb      	ldr	r3, [r7, #8]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000be4 	.word	0x20000be4
 80045f4:	20000bbc 	.word	0x20000bbc
 80045f8:	20000b7c 	.word	0x20000b7c
 80045fc:	20000bc4 	.word	0x20000bc4
 8004600:	200006ec 	.word	0x200006ec
 8004604:	200006e8 	.word	0x200006e8
 8004608:	20000bd0 	.word	0x20000bd0
 800460c:	20000bcc 	.word	0x20000bcc
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <xTaskGetTickCount+0x1c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004620:	687b      	ldr	r3, [r7, #4]
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000bc0 	.word	0x20000bc0

08004634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463e:	4b4f      	ldr	r3, [pc, #316]	; (800477c <xTaskIncrementTick+0x148>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 808f 	bne.w	8004766 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004648:	4b4d      	ldr	r3, [pc, #308]	; (8004780 <xTaskIncrementTick+0x14c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004650:	4a4b      	ldr	r2, [pc, #300]	; (8004780 <xTaskIncrementTick+0x14c>)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d120      	bne.n	800469e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800465c:	4b49      	ldr	r3, [pc, #292]	; (8004784 <xTaskIncrementTick+0x150>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <xTaskIncrementTick+0x48>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	603b      	str	r3, [r7, #0]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <xTaskIncrementTick+0x46>
 800467c:	4b41      	ldr	r3, [pc, #260]	; (8004784 <xTaskIncrementTick+0x150>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <xTaskIncrementTick+0x154>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <xTaskIncrementTick+0x150>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4a3f      	ldr	r2, [pc, #252]	; (8004788 <xTaskIncrementTick+0x154>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b3e      	ldr	r3, [pc, #248]	; (800478c <xTaskIncrementTick+0x158>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <xTaskIncrementTick+0x158>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	f000 fad1 	bl	8004c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800469e:	4b3c      	ldr	r3, [pc, #240]	; (8004790 <xTaskIncrementTick+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d349      	bcc.n	800473c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a8:	4b36      	ldr	r3, [pc, #216]	; (8004784 <xTaskIncrementTick+0x150>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <xTaskIncrementTick+0x15c>)
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	601a      	str	r2, [r3, #0]
					break;
 80046ba:	e03f      	b.n	800473c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046bc:	4b31      	ldr	r3, [pc, #196]	; (8004784 <xTaskIncrementTick+0x150>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d203      	bcs.n	80046dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046d4:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <xTaskIncrementTick+0x15c>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046da:	e02f      	b.n	800473c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe ff99 	bl	8003618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3318      	adds	r3, #24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe ff90 	bl	8003618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <xTaskIncrementTick+0x160>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <xTaskIncrementTick+0xd8>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <xTaskIncrementTick+0x160>)
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <xTaskIncrementTick+0x164>)
 800471a:	441a      	add	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7fe ff1b 	bl	800355e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <xTaskIncrementTick+0x168>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d3b8      	bcc.n	80046a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473a:	e7b5      	b.n	80046a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <xTaskIncrementTick+0x168>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4915      	ldr	r1, [pc, #84]	; (8004798 <xTaskIncrementTick+0x164>)
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d901      	bls.n	8004758 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <xTaskIncrementTick+0x16c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e004      	b.n	8004770 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <xTaskIncrementTick+0x170>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <xTaskIncrementTick+0x170>)
 800476e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004770:	697b      	ldr	r3, [r7, #20]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000be4 	.word	0x20000be4
 8004780:	20000bc0 	.word	0x20000bc0
 8004784:	20000b74 	.word	0x20000b74
 8004788:	20000b78 	.word	0x20000b78
 800478c:	20000bd4 	.word	0x20000bd4
 8004790:	20000bdc 	.word	0x20000bdc
 8004794:	20000bc4 	.word	0x20000bc4
 8004798:	200006ec 	.word	0x200006ec
 800479c:	200006e8 	.word	0x200006e8
 80047a0:	20000bd0 	.word	0x20000bd0
 80047a4:	20000bcc 	.word	0x20000bcc

080047a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ae:	4b28      	ldr	r3, [pc, #160]	; (8004850 <vTaskSwitchContext+0xa8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <vTaskSwitchContext+0xac>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047bc:	e041      	b.n	8004842 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80047be:	4b25      	ldr	r3, [pc, #148]	; (8004854 <vTaskSwitchContext+0xac>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <vTaskSwitchContext+0xb0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e010      	b.n	80047ee <vTaskSwitchContext+0x46>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	607b      	str	r3, [r7, #4]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <vTaskSwitchContext+0x3e>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	491b      	ldr	r1, [pc, #108]	; (800485c <vTaskSwitchContext+0xb4>)
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0e4      	beq.n	80047cc <vTaskSwitchContext+0x24>
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <vTaskSwitchContext+0xb4>)
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3308      	adds	r3, #8
 8004824:	429a      	cmp	r2, r3
 8004826:	d104      	bne.n	8004832 <vTaskSwitchContext+0x8a>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <vTaskSwitchContext+0xb8>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4a06      	ldr	r2, [pc, #24]	; (8004858 <vTaskSwitchContext+0xb0>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6013      	str	r3, [r2, #0]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000be4 	.word	0x20000be4
 8004854:	20000bd0 	.word	0x20000bd0
 8004858:	20000bc4 	.word	0x20000bc4
 800485c:	200006ec 	.word	0x200006ec
 8004860:	200006e8 	.word	0x200006e8

08004864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <vTaskPlaceOnEventList+0x44>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3318      	adds	r3, #24
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fe fe87 	bl	80035a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004898:	2101      	movs	r1, #1
 800489a:	6838      	ldr	r0, [r7, #0]
 800489c:	f000 fa7c 	bl	8004d98 <prvAddCurrentTaskToDelayedList>
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200006e8 	.word	0x200006e8

080048ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	617b      	str	r3, [r7, #20]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <vTaskPlaceOnEventListRestricted+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3318      	adds	r3, #24
 80048da:	4619      	mov	r1, r3
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7fe fe3e 	bl	800355e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f000 fa51 	bl	8004d98 <prvAddCurrentTaskToDelayedList>
	}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200006e8 	.word	0x200006e8

08004904 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60fb      	str	r3, [r7, #12]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3318      	adds	r3, #24
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fe6f 	bl	8003618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493a:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <xTaskRemoveFromEventList+0xb0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d11d      	bne.n	800497e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3304      	adds	r3, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fe66 	bl	8003618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <xTaskRemoveFromEventList+0xb4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d903      	bls.n	8004960 <xTaskRemoveFromEventList+0x5c>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <xTaskRemoveFromEventList+0xb4>)
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <xTaskRemoveFromEventList+0xb8>)
 800496e:	441a      	add	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7fe fdf1 	bl	800355e <vListInsertEnd>
 800497c:	e005      	b.n	800498a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3318      	adds	r3, #24
 8004982:	4619      	mov	r1, r3
 8004984:	480e      	ldr	r0, [pc, #56]	; (80049c0 <xTaskRemoveFromEventList+0xbc>)
 8004986:	f7fe fdea 	bl	800355e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <xTaskRemoveFromEventList+0xc0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d905      	bls.n	80049a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <xTaskRemoveFromEventList+0xc4>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e001      	b.n	80049a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000be4 	.word	0x20000be4
 80049b8:	20000bc4 	.word	0x20000bc4
 80049bc:	200006ec 	.word	0x200006ec
 80049c0:	20000b7c 	.word	0x20000b7c
 80049c4:	200006e8 	.word	0x200006e8
 80049c8:	20000bd0 	.word	0x20000bd0

080049cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <vTaskInternalSetTimeOutState+0x24>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <vTaskInternalSetTimeOutState+0x28>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	605a      	str	r2, [r3, #4]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20000bd4 	.word	0x20000bd4
 80049f4:	20000bc0 	.word	0x20000bc0

080049f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	613b      	str	r3, [r7, #16]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a3a:	f000 fe7b 	bl	8005734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <xTaskCheckForTimeOut+0xbc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d102      	bne.n	8004a5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e023      	b.n	8004aa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <xTaskCheckForTimeOut+0xc0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d007      	beq.n	8004a7a <xTaskCheckForTimeOut+0x82>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e015      	b.n	8004aa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d20b      	bcs.n	8004a9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff9b 	bl	80049cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e004      	b.n	8004aa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004aa6:	f000 fe75 	bl	8005794 <vPortExitCritical>

	return xReturn;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000bc0 	.word	0x20000bc0
 8004ab8:	20000bd4 	.word	0x20000bd4

08004abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <vTaskMissedYield+0x14>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000bd0 	.word	0x20000bd0

08004ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004adc:	f000 f852 	bl	8004b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <prvIdleTask+0x28>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d9f9      	bls.n	8004adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <prvIdleTask+0x2c>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004af8:	e7f0      	b.n	8004adc <prvIdleTask+0x8>
 8004afa:	bf00      	nop
 8004afc:	200006ec 	.word	0x200006ec
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	e00c      	b.n	8004b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <prvInitialiseTaskLists+0x60>)
 8004b1c:	4413      	add	r3, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fcf0 	bl	8003504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3301      	adds	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b37      	cmp	r3, #55	; 0x37
 8004b2e:	d9ef      	bls.n	8004b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b30:	480d      	ldr	r0, [pc, #52]	; (8004b68 <prvInitialiseTaskLists+0x64>)
 8004b32:	f7fe fce7 	bl	8003504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b36:	480d      	ldr	r0, [pc, #52]	; (8004b6c <prvInitialiseTaskLists+0x68>)
 8004b38:	f7fe fce4 	bl	8003504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b3c:	480c      	ldr	r0, [pc, #48]	; (8004b70 <prvInitialiseTaskLists+0x6c>)
 8004b3e:	f7fe fce1 	bl	8003504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b42:	480c      	ldr	r0, [pc, #48]	; (8004b74 <prvInitialiseTaskLists+0x70>)
 8004b44:	f7fe fcde 	bl	8003504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b48:	480b      	ldr	r0, [pc, #44]	; (8004b78 <prvInitialiseTaskLists+0x74>)
 8004b4a:	f7fe fcdb 	bl	8003504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <prvInitialiseTaskLists+0x78>)
 8004b50:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <prvInitialiseTaskLists+0x64>)
 8004b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <prvInitialiseTaskLists+0x7c>)
 8004b56:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <prvInitialiseTaskLists+0x68>)
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200006ec 	.word	0x200006ec
 8004b68:	20000b4c 	.word	0x20000b4c
 8004b6c:	20000b60 	.word	0x20000b60
 8004b70:	20000b7c 	.word	0x20000b7c
 8004b74:	20000b90 	.word	0x20000b90
 8004b78:	20000ba8 	.word	0x20000ba8
 8004b7c:	20000b74 	.word	0x20000b74
 8004b80:	20000b78 	.word	0x20000b78

08004b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b8a:	e019      	b.n	8004bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b8c:	f000 fdd2 	bl	8005734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <prvCheckTasksWaitingTermination+0x50>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fd3b 	bl	8003618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <prvCheckTasksWaitingTermination+0x54>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <prvCheckTasksWaitingTermination+0x54>)
 8004baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bb6:	f000 fded 	bl	8005794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f810 	bl	8004be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e1      	bne.n	8004b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000b90 	.word	0x20000b90
 8004bd8:	20000bbc 	.word	0x20000bbc
 8004bdc:	20000ba4 	.word	0x20000ba4

08004be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 ff8a 	bl	8005b10 <vPortFree>
				vPortFree( pxTCB );
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ff87 	bl	8005b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c02:	e018      	b.n	8004c36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d103      	bne.n	8004c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 ff7e 	bl	8005b10 <vPortFree>
	}
 8004c14:	e00f      	b.n	8004c36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d00a      	beq.n	8004c36 <prvDeleteTCB+0x56>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <prvDeleteTCB+0x54>
	}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <prvResetNextTaskUnblockTime+0x38>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <prvResetNextTaskUnblockTime+0x3c>)
 8004c52:	f04f 32ff 	mov.w	r2, #4294967295
 8004c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c58:	e008      	b.n	8004c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <prvResetNextTaskUnblockTime+0x38>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <prvResetNextTaskUnblockTime+0x3c>)
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000b74 	.word	0x20000b74
 8004c7c:	20000bdc 	.word	0x20000bdc

08004c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <xTaskGetSchedulerState+0x34>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	e008      	b.n	8004ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c94:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <xTaskGetSchedulerState+0x38>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	e001      	b.n	8004ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ca6:	687b      	ldr	r3, [r7, #4]
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000bc8 	.word	0x20000bc8
 8004cb8:	20000be4 	.word	0x20000be4

08004cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d056      	beq.n	8004d80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cd2:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <xTaskPriorityDisinherit+0xd0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d00a      	beq.n	8004cf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60bb      	str	r3, [r7, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d02c      	beq.n	8004d80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d128      	bne.n	8004d80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc70 	bl	8003618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <xTaskPriorityDisinherit+0xd4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <xTaskPriorityDisinherit+0xa4>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <xTaskPriorityDisinherit+0xd4>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <xTaskPriorityDisinherit+0xd8>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe fbf1 	bl	800355e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d80:	697b      	ldr	r3, [r7, #20]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200006e8 	.word	0x200006e8
 8004d90:	20000bc4 	.word	0x20000bc4
 8004d94:	200006ec 	.word	0x200006ec

08004d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <prvAddCurrentTaskToDelayedList+0x90>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004da8:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fc32 	bl	8003618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d10a      	bne.n	8004dd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4819      	ldr	r0, [pc, #100]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dcc:	f7fe fbc7 	bl	800355e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dd0:	e026      	b.n	8004e20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d209      	bcs.n	8004dfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7fe fbd5 	bl	80035a6 <vListInsert>
}
 8004dfc:	e010      	b.n	8004e20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe fbcb 	bl	80035a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d202      	bcs.n	8004e20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000bc0 	.word	0x20000bc0
 8004e2c:	200006e8 	.word	0x200006e8
 8004e30:	20000ba8 	.word	0x20000ba8
 8004e34:	20000b78 	.word	0x20000b78
 8004e38:	20000b74 	.word	0x20000b74
 8004e3c:	20000bdc 	.word	0x20000bdc

08004e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e4a:	f000 fb07 	bl	800545c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <xTimerCreateTimerTask+0x80>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d021      	beq.n	8004e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e5e:	1d3a      	adds	r2, r7, #4
 8004e60:	f107 0108 	add.w	r1, r7, #8
 8004e64:	f107 030c 	add.w	r3, r7, #12
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fb31 	bl	80034d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	2302      	movs	r3, #2
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	460a      	mov	r2, r1
 8004e80:	4910      	ldr	r1, [pc, #64]	; (8004ec4 <xTimerCreateTimerTask+0x84>)
 8004e82:	4811      	ldr	r0, [pc, #68]	; (8004ec8 <xTimerCreateTimerTask+0x88>)
 8004e84:	f7ff f8de 	bl	8004044 <xTaskCreateStatic>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <xTimerCreateTimerTask+0x8c>)
 8004e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <xTimerCreateTimerTask+0x8c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e96:	2301      	movs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004eb6:	697b      	ldr	r3, [r7, #20]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000c18 	.word	0x20000c18
 8004ec4:	08005df0 	.word	0x08005df0
 8004ec8:	08005005 	.word	0x08005005
 8004ecc:	20000c1c 	.word	0x20000c1c

08004ed0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	623b      	str	r3, [r7, #32]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <xTimerGenericCommand+0x98>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02a      	beq.n	8004f5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	dc18      	bgt.n	8004f4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f18:	f7ff feb2 	bl	8004c80 <xTaskGetSchedulerState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d109      	bne.n	8004f36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <xTimerGenericCommand+0x98>)
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f107 0110 	add.w	r1, r7, #16
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2e:	f7fe fca1 	bl	8003874 <xQueueGenericSend>
 8004f32:	6278      	str	r0, [r7, #36]	; 0x24
 8004f34:	e012      	b.n	8004f5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <xTimerGenericCommand+0x98>)
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f107 0110 	add.w	r1, r7, #16
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2200      	movs	r2, #0
 8004f42:	f7fe fc97 	bl	8003874 <xQueueGenericSend>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24
 8004f48:	e008      	b.n	8004f5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <xTimerGenericCommand+0x98>)
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f107 0110 	add.w	r1, r7, #16
 8004f52:	2300      	movs	r3, #0
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	f7fe fd8b 	bl	8003a70 <xQueueGenericSendFromISR>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	; 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000c18 	.word	0x20000c18

08004f6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <prvProcessExpiredTimer+0x94>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fb47 	bl	8003618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d022      	beq.n	8004fde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	18d1      	adds	r1, r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f000 f8d1 	bl	800514c <prvInsertTimerInActiveList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01f      	beq.n	8004ff0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	6978      	ldr	r0, [r7, #20]
 8004fbc:	f7ff ff88 	bl	8004ed0 <xTimerGenericCommand>
 8004fc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	4798      	blx	r3
}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000c10 	.word	0x20000c10

08005004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800500c:	f107 0308 	add.w	r3, r7, #8
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f857 	bl	80050c4 <prvGetNextExpireTime>
 8005016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4619      	mov	r1, r3
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f803 	bl	8005028 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005022:	f000 f8d5 	bl	80051d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005026:	e7f1      	b.n	800500c <prvTimerTask+0x8>

08005028 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005032:	f7ff fa43 	bl	80044bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f866 	bl	800510c <prvSampleTimeNow>
 8005040:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d130      	bne.n	80050aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <prvProcessTimerOrBlockTask+0x3c>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	429a      	cmp	r2, r3
 8005054:	d806      	bhi.n	8005064 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005056:	f7ff fa3f 	bl	80044d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff85 	bl	8004f6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005062:	e024      	b.n	80050ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <prvProcessTimerOrBlockTask+0x90>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <prvProcessTimerOrBlockTask+0x50>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <prvProcessTimerOrBlockTask+0x52>
 8005078:	2300      	movs	r3, #0
 800507a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <prvProcessTimerOrBlockTask+0x94>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	f7fe ffa7 	bl	8003fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800508e:	f7ff fa23 	bl	80044d8 <xTaskResumeAll>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <prvProcessTimerOrBlockTask+0x98>)
 800509a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	f3bf 8f6f 	isb	sy
}
 80050a8:	e001      	b.n	80050ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050aa:	f7ff fa15 	bl	80044d8 <xTaskResumeAll>
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000c14 	.word	0x20000c14
 80050bc:	20000c18 	.word	0x20000c18
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <prvGetNextExpireTime+0x44>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <prvGetNextExpireTime+0x16>
 80050d6:	2201      	movs	r2, #1
 80050d8:	e000      	b.n	80050dc <prvGetNextExpireTime+0x18>
 80050da:	2200      	movs	r2, #0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <prvGetNextExpireTime+0x44>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e001      	b.n	80050f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050f8:	68fb      	ldr	r3, [r7, #12]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000c10 	.word	0x20000c10

0800510c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005114:	f7ff fa7e 	bl	8004614 <xTaskGetTickCount>
 8005118:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <prvSampleTimeNow+0x3c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d205      	bcs.n	8005130 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005124:	f000 f936 	bl	8005394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e002      	b.n	8005136 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005136:	4a04      	ldr	r2, [pc, #16]	; (8005148 <prvSampleTimeNow+0x3c>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000c20 	.word	0x20000c20

0800514c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	d812      	bhi.n	8005198 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e01b      	b.n	80051be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <prvInsertTimerInActiveList+0x7c>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7fe fa08 	bl	80035a6 <vListInsert>
 8005196:	e012      	b.n	80051be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d206      	bcs.n	80051ae <prvInsertTimerInActiveList+0x62>
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e007      	b.n	80051be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <prvInsertTimerInActiveList+0x80>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7fe f9f4 	bl	80035a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000c14 	.word	0x20000c14
 80051cc:	20000c10 	.word	0x20000c10

080051d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08e      	sub	sp, #56	; 0x38
 80051d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051d6:	e0ca      	b.n	800536e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da18      	bge.n	8005210 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	3304      	adds	r3, #4
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	61fb      	str	r3, [r7, #28]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005206:	6850      	ldr	r0, [r2, #4]
 8005208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520a:	6892      	ldr	r2, [r2, #8]
 800520c:	4611      	mov	r1, r2
 800520e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f2c0 80aa 	blt.w	800536c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe f9f5 	bl	8003618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800522e:	463b      	mov	r3, r7
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff6b 	bl	800510c <prvSampleTimeNow>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b09      	cmp	r3, #9
 800523c:	f200 8097 	bhi.w	800536e <prvProcessReceivedCommands+0x19e>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <prvProcessReceivedCommands+0x78>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	08005271 	.word	0x08005271
 800524c:	08005271 	.word	0x08005271
 8005250:	08005271 	.word	0x08005271
 8005254:	080052e5 	.word	0x080052e5
 8005258:	080052f9 	.word	0x080052f9
 800525c:	08005343 	.word	0x08005343
 8005260:	08005271 	.word	0x08005271
 8005264:	08005271 	.word	0x08005271
 8005268:	080052e5 	.word	0x080052e5
 800526c:	080052f9 	.word	0x080052f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	18d1      	adds	r1, r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005290:	f7ff ff5c 	bl	800514c <prvInsertTimerInActiveList>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d069      	beq.n	800536e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05e      	beq.n	800536e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	441a      	add	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2300      	movs	r3, #0
 80052be:	2100      	movs	r1, #0
 80052c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c2:	f7ff fe05 	bl	8004ed0 <xTimerGenericCommand>
 80052c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d14f      	bne.n	800536e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	61bb      	str	r3, [r7, #24]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80052f6:	e03a      	b.n	800536e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	617b      	str	r3, [r7, #20]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	18d1      	adds	r1, r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f7ff ff06 	bl	800514c <prvInsertTimerInActiveList>
					break;
 8005340:	e015      	b.n	800536e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005352:	f000 fbdd 	bl	8005b10 <vPortFree>
 8005356:	e00a      	b.n	800536e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800536a:	e000      	b.n	800536e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800536c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <prvProcessReceivedCommands+0x1c0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	1d39      	adds	r1, r7, #4
 8005374:	2200      	movs	r2, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fc16 	bl	8003ba8 <xQueueReceive>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	f47f af2a 	bne.w	80051d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	3730      	adds	r7, #48	; 0x30
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000c18 	.word	0x20000c18

08005394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800539a:	e048      	b.n	800542e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800539c:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <prvSwitchTimerLists+0xc0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a6:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <prvSwitchTimerLists+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe f92f 	bl	8003618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02e      	beq.n	800542e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90e      	bls.n	8005400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <prvSwitchTimerLists+0xc0>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3304      	adds	r3, #4
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f7fe f8d4 	bl	80035a6 <vListInsert>
 80053fe:	e016      	b.n	800542e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005400:	2300      	movs	r3, #0
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	2300      	movs	r3, #0
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	2100      	movs	r1, #0
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fd60 	bl	8004ed0 <xTimerGenericCommand>
 8005410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	603b      	str	r3, [r7, #0]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <prvSwitchTimerLists+0xc0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1b1      	bne.n	800539c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <prvSwitchTimerLists+0xc0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <prvSwitchTimerLists+0xc4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a04      	ldr	r2, [pc, #16]	; (8005454 <prvSwitchTimerLists+0xc0>)
 8005444:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005446:	4a04      	ldr	r2, [pc, #16]	; (8005458 <prvSwitchTimerLists+0xc4>)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000c10 	.word	0x20000c10
 8005458:	20000c14 	.word	0x20000c14

0800545c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005462:	f000 f967 	bl	8005734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <prvCheckForValidListAndQueue+0x60>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d120      	bne.n	80054b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800546e:	4814      	ldr	r0, [pc, #80]	; (80054c0 <prvCheckForValidListAndQueue+0x64>)
 8005470:	f7fe f848 	bl	8003504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005474:	4813      	ldr	r0, [pc, #76]	; (80054c4 <prvCheckForValidListAndQueue+0x68>)
 8005476:	f7fe f845 	bl	8003504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <prvCheckForValidListAndQueue+0x6c>)
 800547c:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <prvCheckForValidListAndQueue+0x64>)
 800547e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <prvCheckForValidListAndQueue+0x70>)
 8005482:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <prvCheckForValidListAndQueue+0x68>)
 8005484:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005486:	2300      	movs	r3, #0
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <prvCheckForValidListAndQueue+0x74>)
 800548c:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <prvCheckForValidListAndQueue+0x78>)
 800548e:	2110      	movs	r1, #16
 8005490:	200a      	movs	r0, #10
 8005492:	f7fe f953 	bl	800373c <xQueueGenericCreateStatic>
 8005496:	4603      	mov	r3, r0
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <prvCheckForValidListAndQueue+0x60>)
 800549a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <prvCheckForValidListAndQueue+0x60>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <prvCheckForValidListAndQueue+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	490b      	ldr	r1, [pc, #44]	; (80054d8 <prvCheckForValidListAndQueue+0x7c>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fd6c 	bl	8003f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b0:	f000 f970 	bl	8005794 <vPortExitCritical>
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000c18 	.word	0x20000c18
 80054c0:	20000be8 	.word	0x20000be8
 80054c4:	20000bfc 	.word	0x20000bfc
 80054c8:	20000c10 	.word	0x20000c10
 80054cc:	20000c14 	.word	0x20000c14
 80054d0:	20000cc4 	.word	0x20000cc4
 80054d4:	20000c24 	.word	0x20000c24
 80054d8:	08005df8 	.word	0x08005df8

080054dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3b04      	subs	r3, #4
 80054ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3b04      	subs	r3, #4
 80054fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b04      	subs	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800550c:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <pxPortInitialiseStack+0x64>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3b14      	subs	r3, #20
 8005516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3b04      	subs	r3, #4
 8005522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f06f 0202 	mvn.w	r2, #2
 800552a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3b20      	subs	r3, #32
 8005530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005532:	68fb      	ldr	r3, [r7, #12]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	08005545 	.word	0x08005545

08005544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvTaskExitError+0x54>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d00a      	beq.n	800556e <prvTaskExitError+0x2a>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <prvTaskExitError+0x28>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60bb      	str	r3, [r7, #8]
}
 8005580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005582:	bf00      	nop
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0fc      	beq.n	8005584 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800558a:	bf00      	nop
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	2000000c 	.word	0x2000000c
 800559c:	00000000 	.word	0x00000000

080055a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <pxCurrentTCBConst2>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	f380 8809 	msr	PSP, r0
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	4770      	bx	lr
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst2>:
 80055c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055c8:	4808      	ldr	r0, [pc, #32]	; (80055ec <prvPortStartFirstTask+0x24>)
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f380 8808 	msr	MSP, r0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8814 	msr	CONTROL, r0
 80055da:	b662      	cpsie	i
 80055dc:	b661      	cpsie	f
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	df00      	svc	0
 80055e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ea:	bf00      	nop
 80055ec:	e000ed08 	.word	0xe000ed08

080055f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <xPortStartScheduler+0x120>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a46      	ldr	r2, [pc, #280]	; (8005714 <xPortStartScheduler+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10a      	bne.n	8005616 <xPortStartScheduler+0x26>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <xPortStartScheduler+0x120>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a3f      	ldr	r2, [pc, #252]	; (8005718 <xPortStartScheduler+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10a      	bne.n	8005636 <xPortStartScheduler+0x46>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <xPortStartScheduler+0x12c>)
 8005638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <xPortStartScheduler+0x130>)
 800565c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800565e:	4b31      	ldr	r3, [pc, #196]	; (8005724 <xPortStartScheduler+0x134>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005664:	e009      	b.n	800567a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005666:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <xPortStartScheduler+0x134>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3b01      	subs	r3, #1
 800566c:	4a2d      	ldr	r2, [pc, #180]	; (8005724 <xPortStartScheduler+0x134>)
 800566e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d0ef      	beq.n	8005666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <xPortStartScheduler+0x134>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	d00a      	beq.n	80056a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60bb      	str	r3, [r7, #8]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <xPortStartScheduler+0x134>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <xPortStartScheduler+0x134>)
 80056b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <xPortStartScheduler+0x134>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <xPortStartScheduler+0x134>)
 80056bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <xPortStartScheduler+0x138>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <xPortStartScheduler+0x138>)
 80056cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <xPortStartScheduler+0x138>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a14      	ldr	r2, [pc, #80]	; (8005728 <xPortStartScheduler+0x138>)
 80056d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056de:	f000 f8dd 	bl	800589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <xPortStartScheduler+0x13c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056e8:	f000 f8fc 	bl	80058e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056ec:	4b10      	ldr	r3, [pc, #64]	; (8005730 <xPortStartScheduler+0x140>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <xPortStartScheduler+0x140>)
 80056f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056f8:	f7ff ff66 	bl	80055c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056fc:	f7ff f854 	bl	80047a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005700:	f7ff ff20 	bl	8005544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000ed00 	.word	0xe000ed00
 8005714:	410fc271 	.word	0x410fc271
 8005718:	410fc270 	.word	0x410fc270
 800571c:	e000e400 	.word	0xe000e400
 8005720:	20000d14 	.word	0x20000d14
 8005724:	20000d18 	.word	0x20000d18
 8005728:	e000ed20 	.word	0xe000ed20
 800572c:	2000000c 	.word	0x2000000c
 8005730:	e000ef34 	.word	0xe000ef34

08005734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	607b      	str	r3, [r7, #4]
}
 800574c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <vPortEnterCritical+0x58>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <vPortEnterCritical+0x58>)
 8005756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <vPortEnterCritical+0x58>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10f      	bne.n	8005780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortEnterCritical+0x5c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <vPortEnterCritical+0x4c>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	603b      	str	r3, [r7, #0]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <vPortEnterCritical+0x4a>
	}
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	2000000c 	.word	0x2000000c
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <vPortExitCritical+0x50>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vPortExitCritical+0x24>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	607b      	str	r3, [r7, #4]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vPortExitCritical+0x50>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <vPortExitCritical+0x50>)
 80057c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <vPortExitCritical+0x50>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <vPortExitCritical+0x42>
 80057ca:	2300      	movs	r3, #0
 80057cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f383 8811 	msr	BASEPRI, r3
}
 80057d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	2000000c 	.word	0x2000000c
	...

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7fe ffc2 	bl	80047a8 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7fe fedf 	bl	8004634 <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <xPortSysTickHandler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <vPortSetupTimerInterrupt+0x44>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010
 80058d4:	e000e018 	.word	0xe000e018
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	e000e014 	.word	0xe000e014

080058e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058f4 <vPortEnableVFP+0x10>
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ee:	6001      	str	r1, [r0, #0]
 80058f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058f2:	bf00      	nop
 80058f4:	e000ed88 	.word	0xe000ed88

080058f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d914      	bls.n	8005934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <vPortValidateInterruptPriority+0x70>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005914:	4b15      	ldr	r3, [pc, #84]	; (800596c <vPortValidateInterruptPriority+0x74>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	7afa      	ldrb	r2, [r7, #11]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20a      	bcs.n	8005934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <vPortValidateInterruptPriority+0x78>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <vPortValidateInterruptPriority+0x7c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d90a      	bls.n	800595a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	603b      	str	r3, [r7, #0]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <vPortValidateInterruptPriority+0x60>
	}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	e000e3f0 	.word	0xe000e3f0
 800596c:	20000d14 	.word	0x20000d14
 8005970:	e000ed0c 	.word	0xe000ed0c
 8005974:	20000d18 	.word	0x20000d18

08005978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005984:	f7fe fd9a 	bl	80044bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005988:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <pvPortMalloc+0x180>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005990:	f000 f920 	bl	8005bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <pvPortMalloc+0x184>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8093 	bne.w	8005ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01d      	beq.n	80059e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059a8:	2208      	movs	r2, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f023 0307 	bic.w	r3, r3, #7
 80059c0:	3308      	adds	r3, #8
 80059c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <pvPortMalloc+0x6c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d06e      	beq.n	8005ac8 <pvPortMalloc+0x150>
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <pvPortMalloc+0x188>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d869      	bhi.n	8005ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059f4:	4b43      	ldr	r3, [pc, #268]	; (8005b04 <pvPortMalloc+0x18c>)
 80059f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <pvPortMalloc+0x18c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059fe:	e004      	b.n	8005a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d903      	bls.n	8005a1c <pvPortMalloc+0xa4>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f1      	bne.n	8005a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <pvPortMalloc+0x180>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d050      	beq.n	8005ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	2308      	movs	r3, #8
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d91f      	bls.n	8005a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <pvPortMalloc+0xf8>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	613b      	str	r3, [r7, #16]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a82:	69b8      	ldr	r0, [r7, #24]
 8005a84:	f000 f908 	bl	8005c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <pvPortMalloc+0x188>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <pvPortMalloc+0x188>)
 8005a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <pvPortMalloc+0x188>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <pvPortMalloc+0x190>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d203      	bcs.n	8005aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <pvPortMalloc+0x188>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <pvPortMalloc+0x190>)
 8005aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <pvPortMalloc+0x184>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ac8:	f7fe fd06 	bl	80044d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <pvPortMalloc+0x174>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <pvPortMalloc+0x172>
	return pvReturn;
 8005aec:	69fb      	ldr	r3, [r7, #28]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20004924 	.word	0x20004924
 8005afc:	20004938 	.word	0x20004938
 8005b00:	20004928 	.word	0x20004928
 8005b04:	2000491c 	.word	0x2000491c
 8005b08:	2000492c 	.word	0x2000492c
 8005b0c:	20004930 	.word	0x20004930

08005b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04d      	beq.n	8005bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b22:	2308      	movs	r3, #8
 8005b24:	425b      	negs	r3, r3
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <vPortFree+0xb8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <vPortFree+0x44>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <vPortFree+0x62>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60bb      	str	r3, [r7, #8]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <vPortFree+0xb8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11a      	bne.n	8005bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <vPortFree+0xb8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	401a      	ands	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b98:	f7fe fc90 	bl	80044bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vPortFree+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <vPortFree+0xbc>)
 8005ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005baa:	6938      	ldr	r0, [r7, #16]
 8005bac:	f000 f874 	bl	8005c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <vPortFree+0xc0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <vPortFree+0xc0>)
 8005bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bba:	f7fe fc8d 	bl	80044d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20004938 	.word	0x20004938
 8005bcc:	20004928 	.word	0x20004928
 8005bd0:	20004934 	.word	0x20004934

08005bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <prvHeapInit+0xac>)
 8005be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <prvHeapInit+0xac>)
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <prvHeapInit+0xb0>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <prvHeapInit+0xb0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <prvHeapInit+0xb4>)
 8005c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <prvHeapInit+0xb4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvHeapInit+0xb4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <prvHeapInit+0xb4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <prvHeapInit+0xb8>)
 8005c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <prvHeapInit+0xbc>)
 8005c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <prvHeapInit+0xc0>)
 8005c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000d1c 	.word	0x20000d1c
 8005c84:	2000491c 	.word	0x2000491c
 8005c88:	20004924 	.word	0x20004924
 8005c8c:	2000492c 	.word	0x2000492c
 8005c90:	20004928 	.word	0x20004928
 8005c94:	20004938 	.word	0x20004938

08005c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <prvInsertBlockIntoFreeList+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <prvInsertBlockIntoFreeList+0x14>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d8f7      	bhi.n	8005ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d108      	bne.n	8005cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d118      	bne.n	8005d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d00d      	beq.n	8005d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e008      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d002      	beq.n	8005d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000491c 	.word	0x2000491c
 8005d48:	20004924 	.word	0x20004924

08005d4c <__libc_init_array>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4d0d      	ldr	r5, [pc, #52]	; (8005d84 <__libc_init_array+0x38>)
 8005d50:	4c0d      	ldr	r4, [pc, #52]	; (8005d88 <__libc_init_array+0x3c>)
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	2600      	movs	r6, #0
 8005d58:	42a6      	cmp	r6, r4
 8005d5a:	d109      	bne.n	8005d70 <__libc_init_array+0x24>
 8005d5c:	4d0b      	ldr	r5, [pc, #44]	; (8005d8c <__libc_init_array+0x40>)
 8005d5e:	4c0c      	ldr	r4, [pc, #48]	; (8005d90 <__libc_init_array+0x44>)
 8005d60:	f000 f82e 	bl	8005dc0 <_init>
 8005d64:	1b64      	subs	r4, r4, r5
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	2600      	movs	r6, #0
 8005d6a:	42a6      	cmp	r6, r4
 8005d6c:	d105      	bne.n	8005d7a <__libc_init_array+0x2e>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d74:	4798      	blx	r3
 8005d76:	3601      	adds	r6, #1
 8005d78:	e7ee      	b.n	8005d58 <__libc_init_array+0xc>
 8005d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7e:	4798      	blx	r3
 8005d80:	3601      	adds	r6, #1
 8005d82:	e7f2      	b.n	8005d6a <__libc_init_array+0x1e>
 8005d84:	08005e68 	.word	0x08005e68
 8005d88:	08005e68 	.word	0x08005e68
 8005d8c:	08005e68 	.word	0x08005e68
 8005d90:	08005e6c 	.word	0x08005e6c

08005d94 <memcpy>:
 8005d94:	440a      	add	r2, r1
 8005d96:	4291      	cmp	r1, r2
 8005d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d9c:	d100      	bne.n	8005da0 <memcpy+0xc>
 8005d9e:	4770      	bx	lr
 8005da0:	b510      	push	{r4, lr}
 8005da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005daa:	4291      	cmp	r1, r2
 8005dac:	d1f9      	bne.n	8005da2 <memcpy+0xe>
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <memset>:
 8005db0:	4402      	add	r2, r0
 8005db2:	4603      	mov	r3, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
